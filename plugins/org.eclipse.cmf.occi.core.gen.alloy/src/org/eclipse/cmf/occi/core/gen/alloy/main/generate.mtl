[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://schemas.ogf.org/occi/core/ecore', 'http://www.eclipse.org/emf/2002/Ecore')]


[**
 * The documentation of the template generateElement.
 * @param aType
 */]
[template public generate(extension : Extension)]
[comment @main /]
[generateStaticSemantics(extension)/]
[generateDynamicSemantics(extension)/]
[/template]

[template public generateStaticSemantics(extension : Extension)]
[file ('alloy/'+extension.name+'.als', false, 'UTF-8')]
// Generated at [getNow()/] from [comment [getFilePath(extension)/] by org.eclipse.cmf.occi.core.gen.alloy

// ======================================================================
//
// Static Semantics for fclouds '[extension.name/]'
//
// ======================================================================

module [extension.name/]

open util/boolean
open fclouds

// ======================================================================
//
// Imported extensions
//
// ======================================================================

[for (imported : Extension | extension.import)]
open [imported.name/]
[/for]

// ======================================================================
//
// fclouds extension '[extension.name/]'
//
// ======================================================================

one sig extension extends Extension {} {
    name = "[extension.name/]"
    scheme = "[extension.scheme/]"
    [if (extension.import->isEmpty())]no import[else]import = [for (e : Extension | extension.import) separator(' + ')][e.name/]/extension[/for][/if]
    [if (extension.kinds->isEmpty())]no kinds[else]kinds = [for (kind : Kind | extension.kinds) separator(' + ')][kind.term/][/for][/if]
    [if (extension.mixins->isEmpty())]no mixins[else]mixins = [for (mixin : Mixin | extension.mixins) separator(' + ')][mixin.term/][/for][/if]
    [if (extension.types->isEmpty())]no types[else]types = [for (type : DataType | extension.types) separator(' + ')][type.name/]_DataType[/for][/if]
}
[for (kind : Kind | extension.kinds)]
[generateStaticSemantics(kind)/]
[/for]
[for (mixin : Mixin | extension.mixins)]
[generateStaticSemantics(mixin)/]
[/for]
[for (type : DataType | extension.types)]
[generateStaticSemantics(type)/]
[/for]

// ======================================================================
// Check consistency, i.e., there is at least one instance of this model.
// ======================================================================

run Consistency {} for 10

// ======================================================================
// Instance containing the OCCI Type System only.
// ======================================================================

run The_OCCI_Type_System {} for 0

// ======================================================================
// imported check
// ======================================================================

check GetAllCategoriesIsSafe for 10
check GetAllCategoriesIsIdempotent for 10
check GetAllCategoriesOnConfigurationWithoutExtensionsAndUserMixinsReturnsNoCategory for 10
check GetAllCategoriesOnConfigurationWithoutExtensionsReturnsUserMixins for 10
check GetAllCategoriesOnConfigurationWithoutUserMixinsReturnsAllExtensionsKindsAndMixins for 10
check CreateResourceIsIdempotent for 10
check CreateResourceImpliesResourceAddedToKind for 10
check RetrieveResourceIsSafe for 10
check RetrieveResourceIsIdempotent for 10
check CreateResourceAndRetrieveResourceAreSequential for 10 //but exactly 1 Configuration, exactly 2 Resource, exactly 3 Time
check UpdateResourceIsIdempotent for 10
check DeleteResourceIsIdempotent for 10
check DeleteResourceImpliesResourceRemovedFromConfiguration for 10
check CreateResourceAndDeleteResourceAreReversible for 10
check CreateLinkIsIdempotent for 10
check CreateLinkImpliesLinkAddedToKind for 10
check RetrieveLinkIsSafe for 10
check RetrieveLinkIsIdempotent for 10
check CreateLinkAndRetrieveLinkAreSequential for 10
check DeleteLinkIsIdempotent for 10
check DeleteLinkImpliesLinkRemovedFromConfiguration for 10
check CreateLinkAndDeleteLinkAreReversible for 10
check UpdateLinkIsIdempotent for 10
check AddUserMixinDoesNotModifyConfigurationExtensionsAndResources for 10
check AddUserMixinCanNotAddAlreadyExistingMixin for 10
check AddUserMixinDoesTheWork for 10
check RemoveUserMixinDoesNotModifyConfigurationExtensionsAndResources for 10
check RemoveUserMixinCanNotRemoveNotExistingMixin for 10
check RemoveUserMixinDoesTheWork for 10
check AddUserMixinAndRemoveUserMixinAreReversibleOperations_v2 for 10
check AssociateMixinToResourceIsIdempotent for 10
check DissociateMixinFromResourceIsIdempotent for 10
check AssociateMixinToResourceAndDissociateMixinFromResourceAreReversible for 10
check RetrieveCollectionIsSafe for 10
check RetrieveCollectionOnConfigurationWithoutExtensionsAndUserMixinsReturnsNoCategory for 10
check RetrieveCollectionOnConfigurationWithoutExtensionsReturnsUserMixins for 10
check RetrieveCollectionOnConfigurationWithoutUserMixinsReturnsAllExtensionsKindsAndMixins for 10

[/file]
[/template]

[template public generateStringField(label : String, value : String) post (trim())]
    [if (value = null or value.size() = 0)]no [label/][else][label/] = "[escape(value)/]"[/if]
[/template]

[template public generateTermSchemeTitle(category : Category)]
term = "[category.term/]"
scheme = "[category.scheme/]"
[generateStringField('title', category.title)/]
[/template]

[template public generateStaticSemantics(kind : Kind)]

// ======================================================================
//
// OCCI kind '[kind.scheme/][kind.term/]'
//
// ======================================================================

one sig [kind.term/] extends Kind {} {
    [generateTermSchemeTitle(kind)/]
    [if (kind.parent = null)]no parent[else]parent = [getKindParent(kind)/][/if]
    [if (kind.attributes->isEmpty())]no attributes[else]attributes = [for (attribute : Attribute | kind.attributes) separator(' + ')][getSigName(attribute)/][/for][/if]
    [if (kind.actions->isEmpty())]no actions[else]actions = [for (action : Action | kind.actions) separator(' + ')][getSigName(action)/][/for][/if]
	entities.Time in [if (kind.term = 'entity')]fclouds/Entity[else]this/[toU1Case(kind.term)/][/if]
}
[for (attribute : Attribute | kind.attributes)]
[generateStaticSemantics(attribute)/]
[/for]
[for (action : Action | kind.actions)]
[generateStaticSemantics(action)/]
[/for]

// ======================================================================
// Signature for [toU1Case(kind.term)/]
// ======================================================================

sig [toU1Case(kind.term)/] extends [getKindParentSig(kind)/] {
[for (attribute : Attribute | kind.attributes)]
    [getName(attribute)/] : [if (attribute.required)]one[else]lone[/if] [getSigAttributeType(attribute,null)/],
[/for]
} {
    hasKind['['/][kind.term/][']'/]
}
[/template]

[template public generateStaticSemantics(mixin : Mixin)]

// ======================================================================
//
// OCCI mixin '[mixin.scheme/][mixin.term/]'
//
// ======================================================================

one sig [mixin.term/] extends Mixin {} {
    [generateTermSchemeTitle(mixin)/]
    [if (mixin.depends->isEmpty())]no depends[else]depends = [for (md : Mixin | mixin.depends) separator(' + ')][getMixin(md, mixin)/][/for][/if]
    [if (mixin.applies->isEmpty())]no applies[else]applies = [for (kind : Kind | mixin.applies) separator(' + ')][getKind(kind, mixin)/][/for][/if]
    [if (mixin.attributes->isEmpty())]no attributes[else]attributes = [for (attribute : Attribute | mixin.attributes) separator(' + ')][getSigName(attribute)/][/for][/if]
    [if (mixin.actions->isEmpty())]no actions[else]actions = [for (action : Action | mixin.actions) separator(' + ')][getSigName(action)/][/for][/if]
    entities.Time in this/[toU1Case(mixin.term)/]
}
[for (attribute : Attribute | mixin.attributes)]
[generateStaticSemantics(attribute)/]
[/for]
[for (action : Action | mixin.actions)]
[generateStaticSemantics(action)/]
[/for]

// ======================================================================
// Signature for [toU1Case(mixin.term)/]
// ======================================================================

sig [toU1Case(mixin.term)/] in [if(mixin.applies->isEmpty())]core/Entity[else][for (kd : Kind | mixin.applies) separator(' + ')][getKindSig(kd, mixin)/][/for][/if] {
[for (attribute : Attribute | mixin.attributes)]
    [getName(attribute)/] : [if (attribute.required)]one[else]lone[/if] [getSigAttributeType(attribute,null)/],
[/for]
}
[/template]

[template public generateStaticSemantics(attribute : Attribute)]

//
// OCCI attribute '[attribute.name/]'
//
one sig [getSigName(attribute)/] extends Attribute {} {
    name = "[attribute.name/]"
    [if (attribute.type = null)]no type [else]type = [getSigAttributeType(attribute,'_DataType')/][/if]
    mutable = [generate(attribute.mutable)/]
    required = [generate(attribute.required)/]
    [generateStringField('default', attribute.default)/]
    [generateStringField('description', attribute.description)/]
    multiple_values = False[comment [generate(attribute.multiple_values) /]
}
[/template]

[template public generate(bool : Boolean)]
[if(bool)]True[else]False[/if]
[/template]

[template public generateStaticSemantics(action : Action)]

//
// OCCI action '[action.scheme/][action.term/]'
//
one sig [getSigName(action)/] extends Action {} {
    [generateTermSchemeTitle(action)/]
    [if (action.attributes->isEmpty())]no attributes[else]attributes = [for (attribute : Attribute | action.attributes) separator(' + ')][getSigName(attribute)/][/for][/if]
}
[for (attribute : Attribute | action.attributes)][generateStaticSemantics(attribute)/][/for]
[/template]

[template public generateStaticSemantics(type : DataType)]

//
// OCCI data type [type.name/]
//
one sig [type.name/]_DataType extends DataType {} {
    name = "[type.name/]"
}

[generateTypeSig(type)/]
[/template]

[template public generateTypeSig(type : DataType)]
let [type.name/]=String
[/template]

[template public generateTypeSig(type : EEnum)]
abstract sig [type.name/] extends EnumBase {}
one sig [for (literal : EEnumLiteral | type.eLiterals) separator(', ')][type.name/]_[literal.name/][/for] extends [type.name/] {}
[/template]

[template public generateDynamicSemantics(extension : Extension)]
[file ('alloy/'+extension.name+'_behaviour.als', false, 'UTF-8')]
// Generated at [getNow()/] from [comment [getFilePath(extension)/] by org.eclipse.cmf.occi.core.gen.alloy

// ======================================================================
//
// Dynamic Semantics for fclouds '[extension.name/]'
//
// ======================================================================

module [extension.name/]_behaviour

open util/boolean
open fclouds
open [extension.name/]

//
// Imported extensions
//
[for (imported : Extension | extension.import)]
open [imported.name/]
[/for]
[for (kind : Kind | extension.kinds)]
[generateDynamicSemantics(kind)/]
[/for]
[for (mixin : Mixin | extension.mixins)]
[generateDynamicSemantics(mixin)/]
[/for]

// ======================================================================
// Check consistency, i.e., there is at least one instance of this model.
// ======================================================================

run Consistency {} for 10

[/file]
[/template]

[template public generateDynamicSemantics(kind : Kind)]

// ======================================================================
//
// OCCI kind '[kind.scheme/][kind.term/]'
//
// ======================================================================
[let KindSigName : String = toU1Case(kind.term)]

//
// Equivalence predicate between two [KindSigName/] atoms.
//
[let firstLetter : String = kind.term.first(1)]
pred iso[KindSigName/]['['/][firstLetter/]1, [firstLetter/]2: [KindSigName/][']'/]
{
    // Comment following lines when this is not the expected behaviour.
    iso[KindSigName/]['['/][firstLetter/]1, [firstLetter/]2[']'/] // same [kind.parent.term/]
[let stateAttribute : Attribute = getStateAttribute(kind.attributes)]
[for (attribute : Attribute | kind.attributes)]
[if(attribute <> stateAttribute)]
    [firstLetter/]1.[getName(attribute)/] = [firstLetter/]2.[getName(attribute)/] // same [attribute.name/]
[else]
    // [firstLetter/]1.[getName(attribute)/] = [firstLetter/]2.[getName(attribute)/] // could be different [attribute.name/]
[/if]
[/for]
[/let]
}
[/let]

[for (action : Action | kind.actions)]
[generateDynamicSemantics(action, KindSigName)/]
[/for]
[/let]
[/template]

[template public generateDynamicSemantics(mixin : Mixin)]

// ======================================================================
//
// OCCI mixin '[mixin.scheme/][mixin.term/]'
//
// ======================================================================
[let MixinSigName : String = toU1Case(mixin.term)]

//
// Equivalence predicate between two [MixinSigName/] atoms.
//
[let firstLetter : String = mixin.term.first(1)]
pred iso[MixinSigName/]['['/][firstLetter/]1, [firstLetter/]2: [MixinSigName/][']'/]
{
    // Comment following lines when this is not the expected behaviour.
[for (attribute : Attribute | mixin.attributes)]
    [firstLetter/]1.[getName(attribute)/] = [firstLetter/]2.[getName(attribute)/] // same [attribute.name/]
[/for]
}
[/let]
[for (action : Action | mixin.actions)]
[generateDynamicSemantics(action, MixinSigName)/]
[/for]
[/let]
[/template]

[template public generateDynamicSemantics(action : Action, categorySig : String)]

//
// OCCI Action '[action.scheme/][action.term/]'
//

[let ownerCategory : Category = action.eContainer().oclAsType(Category)]
[let stateAttribute : Attribute = getStateAttribute(ownerCategory.attributes)]
pred [action.term/]['['/]before: [categorySig/][for (attribute : Attribute | action.attributes)], [attribute.name/] : [getSigAttributeType(attribute,null)/][/for], after: [categorySig/][']'/]
{
// Warning: Following is a generated default behaviour that should be certainly updated!
    // Precondition before executing the action [action.term/]
    before.[getName(stateAttribute)/] = [getSigAttributeType(stateAttribute,null)/]_[stateAttribute.type.oclAsType(EEnum).eLiterals->asSequence()->first().name/]
    // Postcondition after executing the action [action.term/]
    iso[toU1Case(ownerCategory.term)/]['['/]after, before[']'/]
    after.[getName(stateAttribute)/] = [getSigAttributeType(stateAttribute,null)/]_[stateAttribute.type.oclAsType(EEnum).eLiterals->asSequence()->first().name/]
}
[/let]
[/let]
[/template]

[query public getNow() : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getNow()', 
	Sequence{})/]

[query public escape(string : String) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'escape(java.lang.String)', 
	Sequence{string})/]

[query public getFilePath(extension : Extension) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getFilePath(org.eclipse.cmf.occi.core.Extension)', 
	Sequence{extension})/]

[query public toU1Case(string : String) : String = string.substring(1,1).toUpperCase() + string.substring(2) /]

[query public getScope4Mixin(mixin : Mixin, ctx : Mixin) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getScope(org.eclipse.cmf.occi.core.Category, org.eclipse.cmf.occi.core.Category)', 
	Sequence{mixin,ctx})/]

[query public getScope4Mixin(kind : Kind, ctx : Mixin) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getScope(org.eclipse.cmf.occi.core.Category, org.eclipse.cmf.occi.core.Category)', 
	Sequence{kind,ctx})/]

[query public getScope4KindParent(kind : Kind) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getScope4KindParent(org.eclipse.cmf.occi.core.Kind)', 
	Sequence{kind})/]

[query public getMixin(mixin : Mixin, ctx : Mixin) : String = getScope4Mixin(mixin, ctx) + mixin.term /]

[query public getKind(kind : Kind, ctx : Mixin) : String = getScope4Mixin(kind, ctx) + kind.term /]

[query public getKindSig(kind : Kind, ctx : Mixin) : String = getScope4Mixin(kind, ctx) + toU1Case(kind.term) /]

[query public getKindParentSig(kind : Kind) : String 
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getKindParentSig(org.eclipse.cmf.occi.core.Kind)', 
	Sequence{kind})/]

[query public getKindParent(kind : Kind) : String = getScope4KindParent(kind) + kind.parent.term /]

[query public getSigName(action : Action) : String = action.eContainer().oclAsType(Category).term + '_' + action.term /]

[query public getName(attribute : Attribute) : String = attribute.name.replaceAll('\\.', '_') /]

[query public getSigName(attribute : Attribute) : String = attribute.eContainer().oclAsType(Category).term + '_' + getName(attribute) /]

[query public getSigAttributeType(attribute : Attribute, suffix : String) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.alloy.services.GenUtils', 
	'getSigAttributeType(org.eclipse.cmf.occi.core.Attribute, java.lang.String)', 
	Sequence{attribute,suffix})/]

[query public getStateAttribute(attributes : OrderedSet(Attribute)) : Attribute =
    attributes->any(mutable = false and name.endsWith('state') and type.oclIsTypeOf(EEnum))/]

