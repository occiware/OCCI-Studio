/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package org.eclipse.cmf.occi.infrastructure.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.cmf.occi.infrastructure.util.InfrastructureAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InfrastructureItemProviderAdapterFactory extends InfrastructureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InfrastructureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkItemProvider networkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkAdapter() {
		if (networkItemProvider == null) {
			networkItemProvider = new NetworkItemProvider(this);
		}

		return networkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Compute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputeItemProvider computeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Compute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputeAdapter() {
		if (computeItemProvider == null) {
			computeItemProvider = new ComputeItemProvider(this);
		}

		return computeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageItemProvider storageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageAdapter() {
		if (storageItemProvider == null) {
			storageItemProvider = new StorageItemProvider(this);
		}

		return storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Storagelink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoragelinkItemProvider storagelinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Storagelink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoragelinkAdapter() {
		if (storagelinkItemProvider == null) {
			storagelinkItemProvider = new StoragelinkItemProvider(this);
		}

		return storagelinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Networkinterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkinterfaceItemProvider networkinterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Networkinterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkinterfaceAdapter() {
		if (networkinterfaceItemProvider == null) {
			networkinterfaceItemProvider = new NetworkinterfaceItemProvider(this);
		}

		return networkinterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Ipnetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IpnetworkItemProvider ipnetworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Ipnetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIpnetworkAdapter() {
		if (ipnetworkItemProvider == null) {
			ipnetworkItemProvider = new IpnetworkItemProvider(this);
		}

		return ipnetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Ipnetworkinterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IpnetworkinterfaceItemProvider ipnetworkinterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Ipnetworkinterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIpnetworkinterfaceAdapter() {
		if (ipnetworkinterfaceItemProvider == null) {
			ipnetworkinterfaceItemProvider = new IpnetworkinterfaceItemProvider(this);
		}

		return ipnetworkinterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Os_tpl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Os_tplItemProvider os_tplItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Os_tpl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOs_tplAdapter() {
		if (os_tplItemProvider == null) {
			os_tplItemProvider = new Os_tplItemProvider(this);
		}

		return os_tplItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Resource_tpl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Resource_tplItemProvider resource_tplItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Resource_tpl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResource_tplAdapter() {
		if (resource_tplItemProvider == null) {
			resource_tplItemProvider = new Resource_tplItemProvider(this);
		}

		return resource_tplItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.Ssh_key} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Ssh_keyItemProvider ssh_keyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.Ssh_key}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSsh_keyAdapter() {
		if (ssh_keyItemProvider == null) {
			ssh_keyItemProvider = new Ssh_keyItemProvider(this);
		}

		return ssh_keyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.infrastructure.User_data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected User_dataItemProvider user_dataItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.infrastructure.User_data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUser_dataAdapter() {
		if (user_dataItemProvider == null) {
			user_dataItemProvider = new User_dataItemProvider(this);
		}

		return user_dataItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (networkItemProvider != null) networkItemProvider.dispose();
		if (computeItemProvider != null) computeItemProvider.dispose();
		if (storageItemProvider != null) storageItemProvider.dispose();
		if (storagelinkItemProvider != null) storagelinkItemProvider.dispose();
		if (networkinterfaceItemProvider != null) networkinterfaceItemProvider.dispose();
		if (ipnetworkItemProvider != null) ipnetworkItemProvider.dispose();
		if (ipnetworkinterfaceItemProvider != null) ipnetworkinterfaceItemProvider.dispose();
		if (os_tplItemProvider != null) os_tplItemProvider.dispose();
		if (resource_tplItemProvider != null) resource_tplItemProvider.dispose();
		if (ssh_keyItemProvider != null) ssh_keyItemProvider.dispose();
		if (user_dataItemProvider != null) user_dataItemProvider.dispose();
	}

}
