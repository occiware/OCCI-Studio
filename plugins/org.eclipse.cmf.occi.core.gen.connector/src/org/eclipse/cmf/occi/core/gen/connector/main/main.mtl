[comment encoding = UTF-8 /] 
[module main('http://schemas.ogf.org/occi/core/ecore')] 

[template public main(extension : Extension, targetPackageName : String, extendedPackageName : String)]
[comment @main /]
[generateConnectorFactory(extension, targetPackageName, extendedPackageName)/]
[for (kind : Kind | extension.kinds)]
[generateConnectorClass(kind, extension, targetPackageName, extendedPackageName)/]
[/for]
[/template]

[template public generateConnectorFactory(extension : Extension, targetPackageName : String, extendedPackageName : String)]
[file (getPackagePath(targetPackageName).concat('ConnectorFactory.java'), false, 'UTF-8')]
/**
 * Copyright (c) 2016-2017 Inria
 *  
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 *
 * Generated at [getNow()/] from [getFilePath(extension)/] by org.eclipse.cmf.occi.core.gen.connector
 */
package [targetPackageName/];

/**
 * Connector EFactory for the OCCI extension:
 * - name: [extension.name/]
 * - scheme: [extension.scheme/]
 */
public class ConnectorFactory extends [extendedPackageName/].impl.[toU1Case(extension.name)/]FactoryImpl
{
[for (kind : Kind | extension.kinds)]
[generateCreateKindMethod(kind, extension, extendedPackageName)/]
[/for]
}
[/file]
[/template]

[template public generateCreateKindMethod(kind : Kind, extension : Extension, extendedPackageName : String)]
	/**
	 * EFactory method for OCCI kind:
	 * - scheme: [kind.scheme/]
	 * - term: [kind.term/]
	 * - title: [kind.title/]
	 */
	@Override
[let kindClassName : String = toU1Case(kind.term)]
	public [extendedPackageName/].[kindClassName/] create[kindClassName/]() {
		return new [kindClassName/]Connector();
	}
[/let]
[/template]

[template public generateConnectorClass(kind : Kind, extension : Extension, targetPackageName : String, extendedPackageName : String)]
[file (getPackagePath(targetPackageName).concat(toU1Case(kind.term)).concat('Connector.java'), false, 'UTF-8')]
/**
 * Copyright (c) 2016-2017 Inria
 *  
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 *
 * Generated at [getNow()/] from [getFilePath(extension)/] by org.eclipse.cmf.occi.core.gen.connector
 */
package [targetPackageName/];

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

[let stateAttribute : Attribute = getStateAttribute(kind)]
import [extendedPackageName/].[stateAttribute.type.name/];
[/let]
[for (action: Action| kind.actions)] 
[for (attribute: Attribute| action.attributes)]
[if not (attribute.type.eContainer().oclAsType(Extension).scheme.equalsIgnoreCase('http://schemas.ogf.org/occi/core#'))]
import [extendedPackageName/].[getJavaTypeName(attribute)/]; 
[/if]
[/for]
[/for]
/**
 * Connector implementation for the OCCI kind:
 * - scheme: [kind.scheme/]
 * - term: [kind.term/]
 * - title: [kind.title/]
 */
[let kindClassName : String = toU1Case(kind.term)]
public class [kindClassName/]Connector extends [extendedPackageName/].impl.[kindClassName/]Impl
{
	/**
	 * Initialize the logger.
	 */
	private static Logger LOGGER = LoggerFactory.getLogger([kindClassName/]Connector.class);

	/**
	 * Constructs a [kind.term/] connector.
	 */
	[kindClassName/]Connector()
	{
		LOGGER.debug("Constructor called on " + this);
	}

	//
	// OCCI CRUD callback operations.
	//

	/**
	 * Called when this [kindClassName/] instance is completely created.
	 */
	@Override
	public void occiCreate()
	{
		LOGGER.debug("occiCreate() called on " + this);

		// TODO: Implement this callback or remove this method.
	}

	/**
	 * Called when this [kindClassName/] instance must be retrieved.
	 */
	@Override
	public void occiRetrieve()
	{
		LOGGER.debug("occiRetrieve() called on " + this);

		// TODO: Implement this callback or remove this method.
	}

	/**
	 * Called when this [kindClassName/] instance is completely updated.
	 */
	@Override
	public void occiUpdate()
	{
		LOGGER.debug("occiUpdate() called on " + this);

		// TODO: Implement this callback or remove this method.
	}

	/**
	 * Called when this [kindClassName/] instance will be deleted.
	 */
	@Override
	public void occiDelete()
	{
		LOGGER.debug("occiDelete() called on " + this);

		// TODO: Implement this callback or remove this method.
	}

	//
	// [kindClassName/] actions.
	//

[for (action : Action | kind.actions)]
[generateActionMethod(action, kind, extendedPackageName)/]
[/for]
}	
[/let]
[/file]
[/template]

[template public generateActionMethod(action : Action, kind : Kind, extendedPackageName : String)]
	/**
	 * Implement OCCI action:
     * - scheme: [action.scheme/]
     * - term: [action.term/]
     * - title: [action.title/]
	 */
	@Override
	public void [action.term/]([for (parameter : Attribute | action.attributes) separator(', ')]final [getJavaTypeName(parameter)/] [parameter.name/][/for])
	{
		LOGGER.debug("Action [action.term/]([if (action.attributes->size() > 0)]"[for (parameter : Attribute | action.attributes)] + "[parameter.name/]=" + [parameter.name/][/for] + "[/if]) called on " + this);

[if (getStateAttribute(kind).oclIsUndefined())]
		// TODO: Implement how to [action.term/] this [kind.term/].
[else]
[let stateAttribute : Attribute = getStateAttribute(kind)]
		// [kind.term.toUpperFirst()/] State Machine.
		switch(get[getJavaAttributeName(stateAttribute)/]().getValue()) {



[for (eEnumLiteral : EnumerationLiteral | stateAttribute.type.oclAsType(EnumerationType).literals)]

		case [stateAttribute.type.name/].[eEnumLiteral.name.toUpperCase()/]_VALUE:
			LOGGER.debug("Fire transition(state=[eEnumLiteral.name/], action=\"[action.term/]\")...");

			// TODO Implement transition(state=[eEnumLiteral.name/], action="[action.term/]")

			break;
[/for]



		default:
			break;
		}
[/let]
[/if]
	}

[/template]

[query public getStateAttribute(kind : Kind) : Attribute = kind.attributes->any(attribute : Attribute | attribute.name.endsWith('state') and attribute.type.oclIsTypeOf(EnumerationType)) /]

[query public toU1Case(string : String) : String = string.substring(1,1).toUpperCase() + string.substring(2) /]

[query public getNow() : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.connector.services.GenUtils', 
	'getNow()', 
	Sequence{})/]

[query public getFilePath(extension : Extension) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.connector.services.GenUtils', 
	'getFilePath(org.eclipse.cmf.occi.core.Extension)', 
	Sequence{extension})/] 

[query public getPackagePath(packageName : String) : String = packageName.replaceAll('\\.', '/') + '/' /]

[query public getJavaTypeName(attribute : Attribute) : String
	= invoke(
	'org.eclipse.cmf.occi.core.gen.connector.services.GenUtils', 
	'getJavaTypeName(org.eclipse.cmf.occi.core.Attribute)', 
	Sequence{attribute})/]

[query public getJavaAttributeName(attribute : Attribute) : String 
	= invoke(
	'org.eclipse.cmf.occi.core.gen.connector.services.GenUtils', 
	'getJavaAttributeName(org.eclipse.cmf.occi.core.Attribute)', 
	Sequence{attribute})/]
