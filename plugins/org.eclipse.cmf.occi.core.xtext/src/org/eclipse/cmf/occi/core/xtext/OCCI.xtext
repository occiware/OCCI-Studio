// automatically generated by Xtext
grammar org.eclipse.cmf.occi.core.xtext.OCCI with org.eclipse.xtext.common.Terminals

import "http://schemas.ogf.org/occi/core/ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore   


Grammar returns ecore::EObject:
	Extension// | Configuration
	;
	
Extension returns Extension:
	'extension'
	name=NameID ':' scheme=STRING /* URI */
	('description' description=STRING)?
	('specification' specification=STRING)?
	
	( 'import' ^import+=[Extension|STRING /* URI */] ( 'as' ID )? )*
	(
		kinds+=Kind 
	 	| mixins+=Mixin  
     	| types+=DataType
	)*
	;

Kind returns Kind:
	'kind'
		name=NameID
		('extends' parent=[Kind|QualifiedID])?
		('source' source=[Kind|QualifiedID])?
		('target' target=[Kind|QualifiedID])?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		'{'
		('title' title=STRING)?
		'scheme' scheme=STRING
		( 	attributes+=Attribute
			|	actions+=Action
			|	constraints+=Constraint
		)*
		('fsm' 
			fsm=FSM
		)?
	;

Mixin returns Mixin:
	'mixin'
		name=NameID
		('depends' '(' depends+=[Mixin|QualifiedID] ( "," depends+=[Mixin|QualifiedID])* ')' )?
		('applies' '(' applies+=[Kind|QualifiedID] ( "," applies+=[Kind|QualifiedID])* ')' )?
		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		'{'
			'scheme' scheme=STRING
			('title' title=STRING)?
		
		( 	attributes+=Attribute
			|	actions+=Action
			|	constraints+=Constraint
		)*
		'}';
//
Annotation returns Annotation:
	'annotation'
	'{'
		'key' key=STRING
		'value' value=STRING
	'}';

Attribute returns Attribute:
	'attribute'
		(mutable?='mutable')?
		(required?='required')? 
		name=QualifiedID
		':'
		
		('type' type=[DataType|QualifiedID])?
		
		('=' default=STRING)?
		
		(
			'{'('description' description=STRING)? '}'
		)
		
		(
			'annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' 
		)?
	;

Action returns Action:
	'action'
	name=NameID
	'scheme' scheme=STRING
	
	('(' attributes+=ParameterDecl ( "," attributes+=ParameterDecl)* ')' )?
	('{' 'title' title=STRING '}')?
	('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?	
	;
	
ParameterDecl returns Attribute:
    name=QualifiedID 
    ':'
    type=[DataType|QualifiedID]
	( '=' default=STRING )?
    ;

Constraint returns Constraint:
	'constraint' name=NameID
	('description' description=STRING)?
	'body' body=STRING
	;

FSM returns FSM:
	'FSM'
	'{'
		'attribute' attribute=[Attribute|QualifiedID]
		('states' '{' ownedState+=State ( "," ownedState+=State)* '}' )?
	'}';

State returns State:
	'State'
	'{'
		(initial?='initial')? 
		(final?='final')?
		('literal' literal=[EnumerationLiteral|QualifiedID])
		
//		('incomingTransition' '(' incomingTransition+=[Transition|EString] ( "," incomingTransition+=[Transition|EString])* ')' )?
		('transitions' '(' (outgoingTransition+=Transition)* ')')?
	'}';

Transition returns Transition:
	'to'
	'{'
		'target' target=[State|QualifiedID]
		('action' action=[Action|QualifiedID])?
	'}';

DataType returns DataType:
	StringType | EObjectType | BooleanType | NumericType | EnumerationType | RecordType | ArrayType;
	
StringType returns StringType:
	'StringType'
	name=ID
	'('
		('documentation' documentation=STRING)?
		('pattern' pattern=STRING)?
		('length' length=EIntegerObject)?
		('minLength' minLength=EIntegerObject)?
		('maxLength' maxLength=EIntegerObject)?
	')';

EObjectType returns EObjectType:
	'EObjectType'
	name=ID
	'('
		('documentation' documentation=STRING)?
		('instanceClassName' instanceClassName=STRING)?
	')';

BooleanType returns BooleanType:
	'BooleanType'
	name=ID
	'('
		('documentation' documentation=STRING)?
	')';

NumericType returns NumericType:
	'NumericType'
	name=ID 'type' type=NumericTypeEnum
	'('
		('documentation' documentation=STRING)?
		('totalDigits' totalDigits=EIntegerObject)?
		('minExclusive' minExclusive=STRING)?
		('maxExclusive' maxExclusive=STRING)?
		('minInclusive' minInclusive=STRING)?
		('maxInclusive' maxInclusive=STRING)?
	')';
		
enum NumericTypeEnum returns NumericTypeEnum:
				Byte = 'Byte' | Double = 'Double' | Float = 'Float' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | BigDecimal = 'BigDecimal';

EnumerationType returns EnumerationType:
	'EnumerationType'
	name=ID
	'('	
		'literals' '(' literals+=EnumerationLiteral ( "," literals+=EnumerationLiteral)* ')' 
		('documentation' documentation=STRING)?
	')';
					
EnumerationLiteral returns EnumerationLiteral:
	name=ID
	'('
		('documentation' documentation=STRING)?
	')';
	
RecordType returns RecordType:
	'RecordType'
	name=ID
	'('
		('documentation' documentation=STRING)?
		'fields' '(' recordFields+=RecordField ( "," recordFields+=RecordField)* ')' 
	')';

RecordField returns RecordField:
	'field'
	(mutable?='mutable')?
	(required?='required')? 
	name=QualifiedID
	':'
	('type' type=[DataType|QualifiedID])
	('=' default=STRING)?	
	(
		'{'('description' description=STRING)? '}'
	)
	(
		'annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' 
	)?
	;

ArrayType returns ArrayType:
	'ArrayType'
	name=ID 'type' type=[DataType|QualifiedID]
	(
	'('
		'documentation' documentation=STRING
		
	')'
	)?;



EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

QualifiedID : (ID | QUALIFIED_ID | KEYWORD) ;

NameID :  (ID (ID | ('-') )*) | KEYWORD;

terminal QUALIFIED_ID : 
  '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*  '.' ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ( '.' ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')* )*;

KEYWORD: 'extension' | 'description' | 'specification' | 'as' | 'kind' | 'extends' | 'source' | 'target' | 'annotations' | 'title' | 'scheme' | 'mixin'
		| 'depends' | 'applies' | 'annotation' |  'key' | 'value' | 'attribute' | 'mutable' | 'required' | 'type' | 'action' | 'constraint' | 'body'
		| 'StringType' | 'documentation' | 'pattern' | 'length' | 'minLength' | 'maxLength' | 'EObjectType' | 'instanceClassName' | 'BooleanType' 
		| 'NumericType' | 'totalDigits' | 'minExclusive' | 'maxExclusive' | 'minInclusive' | 'maxInclusive' | 'Byte' | 'Double' | 'Float' |'Integer' | 'Long' |'Short' | 'BigDecimal'
		| 'EnumerationType' | 'literals' | 'RecordType' | 'fields' | 'field' | 'ArrayType'
;